# Age groups
ggplot(df_age_profile_total, aes(x = Archive_Date, y = Total, group = Age_Profile, colour = Age_Profile)) +
geom_line()
# Children
ggplot(df_child_total, aes(x = Archive_Date, y = Total, group = Adult_Child, colour = Adult_Child)) +
geom_line()
# Worst Hospital & Specialities each year
require(scales)
ggplot(df_worst_wait_lists, aes(x = Speciality, Hospital,year, y = waiting_score)) +
geom_bar(stat='identity', color='skyblue',fill='steelblue') +
xlab("") +
ggtitle("Worst Hospital & Speciality waiting lists") +
coord_flip() +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
require(scales)
ggplot(df_worst_wait_lists, aes(x = year, HospSpec, y = waiting_score, color = HospSpec, fill = HospSpec, group = HospSpec)) +
geom_bar(stat='identity', position=position_dodge(), color = "black") +
geom_text(aes(label = round(waiting_score/1000)), color = "white",
vjust = 1.6,  position = position_dodge(0.9), size=2.5) +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
scale_fill_brewer(palette="BrBG") +
### Time series analysis
ggseasonplot(ts_total, continuous = TRUE) # Trend is too pronounced to appreciate seasonality
#####################################
#### 3. Visualisation  & summary ####
#####################################
### Summaries
Hmisc::describe(df)
psych::describe(df)
### Overall trend
plot(df_monthly_total$Total ~ df_monthly_total$Archive_Date, type = "l",
main = "Waiting Lists for all Ireland and Specialities", xlab = "date", ylab = "# of People")
### Comparative analysis
# Hospitals
ggplot(df_hospital_total, aes(x = Archive_Date, y = Total, group = Hospital, colour = Hospital)) +
geom_line()
# Specialties
ggplot(df_specialty_total, aes(x = Archive_Date, y = Total, group = Speciality, colour = Speciality)) +
geom_line()
# Age groups
ggplot(df_age_profile_total, aes(x = Archive_Date, y = Total, group = Age_Profile, colour = Age_Profile)) +
geom_line()
# Children
ggplot(df_child_total, aes(x = Archive_Date, y = Total, group = Adult_Child, colour = Adult_Child)) +
geom_line()
# Worst Hospital & Specialities each year
require(scales)
ggplot(df_worst_wait_lists, aes(x = Speciality, Hospital,year, y = waiting_score)) +
geom_bar(stat='identity', color='skyblue',fill='steelblue') +
xlab("") +
ggtitle("Worst Hospital & Speciality waiting lists") +
coord_flip() +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
require(scales)
ggplot(df_worst_wait_lists, aes(x = year, HospSpec, y = waiting_score, color = HospSpec, fill = HospSpec, group = HospSpec)) +
geom_bar(stat='identity', position=position_dodge(), color = "black") +
geom_text(aes(label = round(waiting_score/1000)), color = "white",
vjust = 1.6,  position = position_dodge(0.9), size=2.5) +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
scale_fill_brewer(palette="BrBG")
### Time series analysis
ggseasonplot(ts_total, continuous = TRUE) # Trend is too pronounced to appreciate seasonality
plot(ts_total_dec)
plot(ts_total_dec$seasonal, type = "l", main = "Monthly Seasonality", ylab = "Waiting List") # significant seasonal component
### Distribution & Extreme values
# waiting lists distribution
boxplot(df_monthly_total$Total,  main = "Hospitals Waiting List Boxplot")  - # monthly break out
boxplot(df_hospital_total$Total) # hospital break out
### Distribution & Extreme values
# waiting lists distribution
boxplot(df_monthly_total$Total,  main = "Hospitals Waiting List Boxplot")  - # monthly break out
boxplot(df_hospital_total$Total) # hospital break out
### Distribution & Extreme values
# waiting lists distribution
boxplot(df_monthly_total$Total,  main = "Hospitals Waiting List Boxplot")  - # monthly break out
boxplot(df_hospital_total$Total) # hospital break out
### Distribution & Extreme values
# waiting lists distribution
boxplot(df_monthly_total$Total,  main = "Hospitals Waiting List Boxplot")  # monthly break out
boxplot(df_hospital_total$Total) # hospital break out
#####################################
#### 3. Visualisation  & summary ####
#####################################
### Summaries
Hmisc::describe(df)
psych::describe(df)
### Overall trend
plot(df_monthly_total$Total ~ df_monthly_total$Archive_Date, type = "l",
main = "Waiting Lists for all Ireland and Specialities", xlab = "date", ylab = "# of People")
### Comparative analysis
# Hospitals
ggplot(df_hospital_total, aes(x = Archive_Date, y = Total, group = Hospital, colour = Hospital)) +
geom_line()
# Specialties
ggplot(df_specialty_total, aes(x = Archive_Date, y = Total, group = Speciality, colour = Speciality)) +
geom_line()
# Age groups
ggplot(df_age_profile_total, aes(x = Archive_Date, y = Total, group = Age_Profile, colour = Age_Profile)) +
geom_line()
# Children
ggplot(df_child_total, aes(x = Archive_Date, y = Total, group = Adult_Child, colour = Adult_Child)) +
geom_line()
# Worst Hospital & Specialities each year
require(scales)
ggplot(df_worst_wait_lists, aes(x = Speciality, Hospital,year, y = waiting_score)) +
geom_bar(stat='identity', color='skyblue',fill='steelblue') +
xlab("") +
ggtitle("Worst Hospital & Speciality waiting lists") +
coord_flip() +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE))
require(scales)
ggplot(df_worst_wait_lists, aes(x = year, HospSpec, y = waiting_score, color = HospSpec, fill = HospSpec, group = HospSpec)) +
geom_bar(stat='identity', position=position_dodge(), color = "black") +
geom_text(aes(label = round(waiting_score/1000)), color = "white",
vjust = 1.6,  position = position_dodge(0.9), size=2.5) +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
scale_fill_brewer(palette="BrBG")
### Time series analysis
ggseasonplot(ts_total, continuous = TRUE) # Trend is too pronounced to appreciate seasonality
plot(ts_total_dec)
plot(ts_total_dec$seasonal, type = "l", main = "Monthly Seasonality", ylab = "Waiting List") # significant seasonal component
### Distribution & Extreme values
# waiting lists distribution
boxplot(df_monthly_total$Total,  main = "Hospitals Waiting List Boxplot") # monthly break out
boxplot(df_hospital_total$Total) # hospital break out
boxplot(df_specialty_total$Total) # specialty break out
boxplot(df_age_profile_total$Total) # age_profile break out
plot(density(df_monthly_total$Total), main = "Months Waiting List Density")
plot(density(df_hospital_total$Total),main="Hospital Waiting List Distribution")
plot(density(df_specialty_total$Total),main="Specialty Waiting List Distribution")
plot(density(df_age_profile_total$Total),main="Age Profile Waiting List Distribution")
#####################################
#### 3. Visualisation  & summary ####
#####################################
### Summaries
Hmisc::describe(df)
psych::describe(df)
### Overall trend
plot(df_monthly_total$Total ~ df_monthly_total$Archive_Date, type = "l",
main = "Waiting Lists for all Ireland and Specialities", xlab = "date", ylab = "# of People")
### Comparative analysis
# Hospitals
ggplot(df_hospital_total, aes(x = Archive_Date, y = Total, group = Hospital, colour = Hospital)) +
geom_line()
# Specialties
ggplot(df_specialty_total, aes(x = Archive_Date, y = Total, group = Speciality, colour = Speciality)) +
geom_line()
# Age groups
ggplot(df_age_profile_total, aes(x = Archive_Date, y = Total, group = Age_Profile, colour = Age_Profile)) +
geom_line()
# Children
ggplot(df_child_total, aes(x = Archive_Date, y = Total, group = Adult_Child, colour = Adult_Child)) +
geom_line()
# Worst Hospital & Specialities each year
require(scales)
ggplot(df_worst_wait_lists, aes(x = year, HospSpec, y = waiting_score, color = HospSpec, fill = HospSpec, group = HospSpec)) +
geom_bar(stat='identity', position=position_dodge(), color = "black") +
geom_text(aes(label = round(waiting_score/1000)), color = "white",
vjust = 1.6,  position = position_dodge(0.9), size=2.5) +
scale_y_continuous(labels = function(x) format(x, scientific = FALSE)) +
scale_fill_brewer(palette="BrBG")
### Time series analysis
ggseasonplot(ts_total, continuous = TRUE) # Trend is too pronounced to appreciate seasonality
plot(ts_total_dec)
plot(ts_total_dec$seasonal, type = "l", main = "Monthly Seasonality", ylab = "Waiting List") # significant seasonal component
### Distribution & Extreme values
# waiting lists distribution
boxplot(df_monthly_total$Total,  main = "Hospitals Waiting List Boxplot") # monthly break out
boxplot(df_hospital_total$Total) # hospital break out
boxplot(df_specialty_total$Total) # specialty break out
boxplot(df_age_profile_total$Total) # age_profile break out
plot(density(df_monthly_total$Total), main = "Months Waiting List Density")
plot(density(df_hospital_total$Total),main="Hospital Waiting List Distribution")
plot(density(df_specialty_total$Total),main="Specialty Waiting List Distribution")
plot(density(df_age_profile_total$Total),main="Age Profile Waiting List Distribution")
get.cwd()
getwd()
folderpath <- "C:/Users/User/Projects/assignment-1-uallende/assignment-2-uallende"
setwd(path)
path <- "C:/Users/User/Projects/assignment-1-uallende/assignment-2-uallende"
setwd(path)
path <- "C:/Users/User/Projects/assignment-1-uallende/assignment-2-uallende/"
setwd(path)
path <- "C:/Users/User/Projects/working-with-data/assignment-2-uallende/"
setwd(path)
file_data <- read.csv(weather_data.csv)
file_data <- read.csv('/weather_data.csv')
file_data <- read.csv('weather_data.csv')
file_data <- read.csv('weather_data.csv')
View(file_data)
file_data <- NULL
file_data <- NULL
file_data <- read.csv('weather_data.csv')
View(file_data)
file_data <- read.csv('weather_data.csv')
file_data$STATION <- NULL
file_data$STATION_NAME <- NULL
avg_hpcp <- mean(file_data$HPCP)
max_hpcp <- max(file_data$HPCP)
avg_hpcp <- mean(file_data$HPCP)
max_hpcp <- max(file_data$HPCP)
std_hpcp <- sd(file_data$HPCP)
avg_hpcp <- mean(file_data$HPCP) %>%
print()
max_hpcp <- max(file_data$HPCP) %>%
print()
std_hpcp <- sd(file_data$HPCP) %>%
print()
library(tidyverse)
library(dplyr)
library(anytime)
library(lubridate)
library(Hmisc)
library(pastecs)
library(psych)
library(forecast)
library(reshape2)
avg_hpcp <- mean(file_data$HPCP) %>%
print()
max_hpcp <- max(file_data$HPCP) %>%
print()
std_hpcp <- sd(file_data$HPCP) %>%
print()
file_data[file_data$HPCP == max(file_data$HPCP)] <- NA
max(file_data$HPCP)
file_data[file_data$HPCP == (max(file_data$HPCP))] <- NA
file_data[file_data$HPCP ==0]
file_data[file_data ==0]
file_data$HPCP[file_data$HPCP == (max(file_data$HPCP))] <- NA
avg_hpcp <- mean(file_data$HPCP) %>%
print()
max_hpcp <- max(file_data$HPCP) %>%
print()
std_hpcp <- sd(file_data$HPCP) %>%
print()
frequency(file_data$HPCP)
frequency(file_data)
for (i in 1:length(file_data)){
if(is.na(file_data[i,2]) == TRUE){
file_data[i,2] <- file_data[i-1,2]
}
}
avg_hpcp <- mean(file_data$HPCP) %>%
print()
max_hpcp <- max(file_data$HPCP) %>%
print()
std_hpcp <- sd(file_data$HPCP) %>%
print()
is.na(file_data[2,2])
is.na(file_data)
file_data[1,1]
file_data[1,]
file_data[2,]
file_data[2,2]
file_data$HPCP <- fill(file_data$HPCP, direction = "up")
file_data$HPCP <- fill(file_data$HPCP, .direction = "up")
colSums(is.na(file_data))
length(file_data)
for (i in 1:length(file_data$HPCP))
{
if(is.na(file_data[i,2]) == TRUE){
file_data[i,2] <- file_data[i-1,2]
}
}
colSums(is.na(file_data))
avg_hpcp <- mean(file_data$HPCP) %>%
print()
max_hpcp <- max(file_data$HPCP) %>%
print()
std_hpcp <- sd(file_data$HPCP) %>%
print()
avg_hpcp <- mean(file_data$HPCP) %>%
print(concant('Average: '))
Evaluation_1 <- data.frame(matrix(NA, ncol= 1, nrow= 3))
row.names(Evaluation_1) <-c("Answer to question 1")
colnames(Evaluation_1) <-c("Average", "Max", "Standard Dev")
Evaluation_1 <- data.frame(matrix(NA, ncol= 1, nrow= 3))
row.names(Evaluation_1) <- c("Average", "Max", "Standard Dev")
colnames(Evaluation_1) <- c("Answer to question 1")
Evaluation_1
Evaluation_1[,1] <- c(avg_hpcp, max_hpcp, std_hpcp) %>%
print(
Evaluation_1[,1] <- c(avg_hpcp, max_hpcp, std_hpcp) %>%
print()
Evaluation_1
Evaluation_1 <- data.frame(matrix(NA, ncol= 1, nrow= 3))
row.names(Evaluation_1) <- c("Average", "Max", "Standard Dev")
colnames(Evaluation_1) <- c("Answer to question 1")
View(Evaluation_1)
Evaluation_1[,1] <- c(avg_hpcp, max_hpcp, std_hpcp)
Evaluation_1[,1] <- c(avg_hpcp, max_hpcp, std_hpcp) %>%
print()
Evaluation_1[,1] <- c(avg_hpcp, max_hpcp, std_hpcp) %>%
print(, row.names = TRUE)
Evaluation_1[,1] <- c(avg_hpcp, max_hpcp, std_hpcp) %>%
print(, quote = TRUE, row.names = TRUE)
Evaluation_1[,1] <- c(avg_hpcp, max_hpcp, std_hpcp) %>%
print(., quote = TRUE, row.names = TRUE)
print(Evaluation_1)
as.Date(file_data$DATE)
file_data$DATE
subset(file_data, DATE!='%2013')
removing_2013 <- subset(file_data, DATE!='%2013')
View(removing_2013)
removing_2013 <- subset(file_data, DATE!='%2013%')
file_data[!grepl("2013", file_data$DATE),]
removing_2013 <- file_data[!grepl("2013", file_data$DATE),]
View(removing_2013)
View(removing_2013)
within(file_data, FOO<-data.frame(do.call('rbind', strsplit(as.character(FOO), ' ', fixed=TRUE))))
library(tidyverse)
library(dplyr)
library(anytime)
library(lubridate)
library(tidyr)
within(file_data, FOO<-data.frame(do.call('rbind', strsplit(as.character(FOO), ' ', fixed=TRUE))))
within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(FOO), ' ', fixed=TRUE))))
within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE))))
split_date_time <- within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE))))
View(split_date_time)
split_date_time <- within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE)))) %>%
rename(DATE.X1 = Date,
DATE.X2 = Time)
split_date_time <- within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE)))) %>%
rename(Date = DATE.X1,
Time = DATE.X2)
colnames(split_date_time) <- c('Date', 'Time', 'HPCP')
split_date_time <- within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE))))
View(split_date_time)
colnames(split_date_time) <- c('Date', 'Time', 'HPCP')
colname()
colnames(split_date_time)
split_date_time <- within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE)))) %>%
print(head(5))
split_date_time <- within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE)))) %>%
print(head(., 5))
head(split_date_time, 3)
split_date_time <- within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE)))) %>%
print(head(split_date_time, 5))
split_date_time <- within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE)))) %>%
print(head(, 3))
split_date_time <- within(file_data, DATE<-data.frame(do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE)))) %>%
print(head(. , 3))
head(split_date_time, 3)
split_date_time$DATE
as.Date(split_date_time$DATE)
split_date_time$DATE<- parse_date_time(df_dates$DATE, orders = "ymd")
split_date_time$DATE<- parse_date_time(split_date_time$DATE, orders = "ymd")
View(split_date_time)
View(split_date_time)
split_date_time <- within(file_data, DATE<-data.frame(do.call(strsplit(as.character(DATE), ' ', fixed=TRUE))))
split_date_time$DATE <- do.call('rbind', strsplit(as.character(DATE), ' ', fixed=TRUE)))
split_date_time$DATE <- data.frame(do.call('rbind', strsplit(as.character(split_date_time$DATE), ' ', fixed=TRUE)))
View(split_date_time)
split_date_time$DATE <- data.frame(do.call('rbind', strsplit(as.character(file_data$DATE), ' ', fixed=TRUE)))
colnames(split_date_time)
separate(data = file_data, col = DATE, into = c("Date", "Time"), sep = ' ')
split_date_time <- separate(data = file_data, col = DATE, into = c("Date", "Time"), sep = ' ')
View(split_date_time)
as.Date(split_date_time$Date)
colnames(split_date_time)
split_date_time <- separate(data = file_data, col = DATE, into = c("Date", "Time"), sep = ' ')
head(split_date_time, 3)
split_date_time$Date<- parse_date_time(split_date_time$Date, orders = "ymd")
View(split_date_time)
colSums(is.na(split_date_time$Date)) # no NAs in dates - conversion successful
colSums(is.na(split_date_time)) # no NAs in dates - conversion successful
wettest_month <- split_date_time %>%
mutate(month = month(split_date_time$Date)) %>%
group_by(month) %>%
summarise(avg = mean(HPCP))
View(wettest_month)
wettest_month <- split_date_time %>%
mutate(month = month(split_date_time$Date)) %>%
group_by(month) %>%
summarise(avg = mean(HPCP)) %>%
filter(HPCP == max(HPCP)) %>%
print()
wettest_month <- split_date_time %>%
mutate(month = month(split_date_time$Date)) %>%
group_by(month) %>%
summarise(avg = mean(HPCP)) %>%
filter(avg == max(avg)) %>%
print()
View(wettest_month)
View(split_date_time)
wettest_half_day <- split_date_time %>%
mutate(mor_eve = ifelse(split_date_time$Time < 12:00))
as.POSIXct(split_date_time$time,format="%H:%M:%S")
split_date_time$time <- as.POSIXct(split_date_time$time,format="%H:%M:%S")
class(split_date_time$time)
View(split_date_time)
split_date_time$Time <- as.POSIXct(split_date_time$Time,format="%H:%M:%S")
View(split_date_time)
split_date_time$Date<- parse_date_time(split_date_time$Date, orders = "ymd") # convert to date
split_date_time <- separate(data = file_data, col = DATE, into = c("Date", "Time"), sep = ' ')
head(split_date_time, 3)
#########
# 4. Find the wettest month (on average over the period 2007 - 2012
###################################################################
split_date_time$Date<- parse_date_time(split_date_time$Date, orders = "ymd") # convert to date
colSums(is.na(split_date_time)) # no NAs in dates - conversion successful
wettest_month <- split_date_time %>%
mutate(month = month(split_date_time$Date)) %>%
group_by(month) %>%
summarise(avg = mean(HPCP)) %>%
filter(avg == max(avg)) %>%
print() # July is the wettest month
as.POSIXct(split_date_time$Time,format="%H:%M:%S")
as.POSIXct(split_date_time$Time,format="%H:%M")
split_date_time$Time <- as.POSIXct(split_date_time$Time,format="%H:%M")
wettest_half_day <- split_date_time %>%
mutate(mor_eve = ifelse(split_date_time$Time < '12:00'))
wettest_half_day <- split_date_time %>%
mutate(mor_eve = ifelse(split_date_time$Time < 12:00))
split_date_time <- separate(data = file_data, col = DATE, into = c("Date", "Time"), sep = ' ')
head(split_date_time, 3)
#########
# 4. Find the wettest month (on average over the period 2007 - 2012
###################################################################
split_date_time$Date<- parse_date_time(split_date_time$Date, orders = "ymd") # convert to date
colSums(is.na(split_date_time)) # no NAs in dates - conversion successful
split_date_time$Time <- str_replace_all(split_date_time$Time, ":", "")
View(split_date_time)
split_date_time$Time <- as.numeric(str_replace_all(split_date_time$Time, ":", ""))
wettest_half_day <- split_date_time %>%
mutate(mor_eve = ifelse(split_date_time$Time < 1200, 'morning', 'evening'))
View(wettest_half_day)
View(file_data)
wettest_half_day <- split_date_time %>%
mutate(mor_eve = ifelse(split_date_time$Time < 1200, 'morning', 'evening')) %>%
group_by(mor_eve) %>%
summarise(avg = mean(HPCP)) %>%
filter(avg == max(avg)) %>%
print()
wettest_half_day <- split_date_time %>%
mutate(mor_eve = ifelse(split_date_time$Time < 1200, 'morning', 'evening')) %>%
group_by(mor_eve) %>%
summarise(avg = mean(HPCP))
View(wettest_half_day)
View(wettest_half_day)
wettest_half_day <- split_date_time %>%
mutate(mor_eve = ifelse(split_date_time$Time < 1200, 'morning', 'evening')) %>%
group_by(mor_eve) %>%
summarise(avg = mean(HPCP)) %>%
filter(avg == max(avg)) %>%
print() # Evening is wetter
largest_increase <- split_date_time
View(largest_increase)
largest_increase <- split_date_time %>%
mutate(month = month(split_date_time$Date)) %>%
group_by(month) %>%
summarise(avg = mean(HPCP))
largest_increase <- split_date_time %>%
mutate(month = month(split_date_time$Date)) %>%
mutate(year = year(split_date_time$Date)) %>%
group_by(year, month) %>%
summarise(avg = mean(HPCP))
largest_increase <- split_date_time %>%
mutate(month = month(split_date_time$Date)) %>%
mutate(year = year(split_date_time$Date)) %>%
filter(year > 2007) %>%
group_by(year, month) %>%
summarise(avg = mean(HPCP))
largest_increase <- split_date_time %>%
mutate(month = month(split_date_time$Date)) %>%
mutate(year = year(split_date_time$Date)) %>%
group_by(year, month) %>%
summarise(avg = mean(HPCP))
prev_month <- shift(largest_increase$avg, n=1L, fill=NA, type=c("lag"), give.names=FALSE)
library(data.table)
prev_month <- shift(largest_increase$avg, n=1L, fill=NA, type=c("lag"), give.names=FALSE)
largest_increase$prev_month <- hift(largest_increase$avg, n=1L, fill=NA, type=c("lag"), give.names=FALSE)
largest_increase$prev_month <- shift(largest_increase$avg, n=1L, fill=NA, type=c("lag"), give.names=FALSE)
largest_increase$delta <- largest_increase$avg - largest_increase$prev_month
filter(largest_increase$delta == max(largest_increase$delta)) %>%
print()
filter(largest_increase, largest_increase$delta == max(largest_increase$delta)) %>%
print()
largest_increase[is.na(largest_increase)] <- 0
filter(largest_increase, largest_increase$delta == max(largest_increase$delta)) %>%
print()
largest_increase$prev_month <- shift(largest_increase$avg, n=1L, fill=NA, type=c("lag"), give.names=FALSE)
largest_increase[is.na(largest_increase)] <- 0
largest_increase$delta <- largest_increase$avg - largest_increase$prev_month
filter(largest_increase, largest_increase$delta == max(largest_increase$delta)) %>%
print()
colSums(is.na(largest_increase))
largest_increase %>% filter(largest_increase$delta == max(largest_increase$delta)) %>%
print()
largest_increase$delta == max(largest_increase$delta)
largest_increase %>%
filter(., delta == max(delta)) %>%
print()
largest_increase %>%
filter(delta == max(delta)) %>%
print()
largest_increase %>% largest_increase[,c(1,2,5)] %>%
filter(delta == max(delta)) %>%
print()
largest_increase %>%
select(1,2,5) %>%
filter(delta == max(delta)) %>%
print()
delta == max(delta)
largest_increase %>%
select(1,2,5)
max(largest_increase$delta)
largest_increase %>%
select(1,2,5) %>%
filter(delta == max(largest_increase$delta)) %>%
print()
